functional requirements- 

/start_session - creates a session_id
request- {
    user_id: int
    session_name: string
}
response{
    message: session from given user created successfully
}

/send_message - user can send message or attach files
request {
    user_id:int,
    session_id:int,
    messages:string,
    attachments: files
}
response {
    prompt_response: string (will be based on most reccent 3-5 chats)
}

/get_message - user will get the most recent messages along with attachments if any
request {
    user_id:int,
    session_id:int,
    limit: int (will return most recent x number of sessions)
    skip: int (optional- will skip x number of recent sessions)
}
response {
    messages: [{
        message:string,
        timestamp: datetime,
        attachments: files,
    }]string
}
/delete_session/session_id 
request {}
response {
    message: session_id deleted successfully
}


Non-functional requirements- 
- latency (websockets)
- rate limiting user based
- Scalable

// The average consumer sends 72 messages per day 
// Average 1 message size ~100 bytes + ~50 bytes for remaining fields in the message table
// Daily active users 1 million -> ~12GB per day ~4.4TB/year